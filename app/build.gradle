apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

dependencies {
    implementation project(':ShoppingListLibrary')
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation 'org.openintents:distribution-lib:1.0.2'
    //noinspection GradleDependency
    implementation 'com.github.blockstack:blockstack-android:f86c5c844e'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:customtabs:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'org.openintents.convertcsv'
        versionCode 15
        versionName '2.0.0-beta3'
        minSdkVersion 19
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace('.apk', "-${versionName}.apk")
                output.outputFileName = new File(fileName)
            }
        }
    }

    def propertyFile = new File(projectDir, "build-private.properties")
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    if (propertyFile.exists()) {
        signingConfigs {
            release {
                Properties props = new Properties()
                props.load(new FileInputStream(propertyFile))

                storeFile file(props.getProperty("key.store"))
                storePassword props.getProperty("key.store.password")
                keyAlias props.getProperty("key.alias")
                keyPassword props.getProperty("key.alias.password")
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
        println "Release apks will be signed!"
    } else {
        println "For signed release apks you need to create a build-private.properties file"
    }

}